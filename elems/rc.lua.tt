<% define_locals do
  variable :"terminal.cmd",    type: :string, as: :terminal_cmd
  variable :"web_browser.cmd", type: :string, as: :web_brower_cmd

  variable :"awesome_wm.theme.name", type: :string, as: :theme_name
  variable :"awesome_wm.widgets",                   as: :widgets

  variable :"awesome_wm.font.size.popup", type: :int, as: :font_size_popup

  computed(:with_urxvtd) { local!(:terminal_cmd) =~ /^urxvtc/ }
end -%>

-- Requires ────────────────────────────────────────────────────────────────────

-- Standard awesome library.
local gears = require("gears")
local awful = require("awful")
awful.rules = require("awful.rules")
require("awful.autofocus")

-- Widget and layout library.
local wibox = require("wibox")

-- Theme handling library.
local beautiful = require("beautiful")

-- Notification library.
local naughty = require("naughty")
local menubar = require("menubar")

-- Awesome WM complements library.
local lain = require("lain")

-- Custom utilities.
local run   = require("utils/run")
local quake = require("quake")
local menugen = require("menugen")

-- Variables ───────────────────────────────────────────────────────────────────

local modkey = "Mod4"
local altkey = "Mod1"

local terminal_cmd = "<%= local! :terminal_cmd %>"

local browser = "<%= local! :web_brower_cmd %>"

local editor = os.getenv("EDITOR") or "nvim" or "vim" or "vi" or "nano"
local editor_cmd  = terminal_cmd .. " -e " .. editor

-- Available layouts.

-- Tags information: tag names and default layouts.
local layouts = {
  awful.layout.suit.max,
  awful.layout.suit.tile,
  awful.layout.suit.tile.bottom,
  awful.layout.suit.fair,
  awful.layout.suit.fair.horizontal,
  awful.layout.suit.floating
}
local tags_info = {
  names = {
    "1:ref",
    "2:main",
    "3:main",
    "4:supp",
    "5:supp",
    "6:supp",
    "7:media",
    "8:social",
    "9:tmp"
  },
  layout = {
    layouts[1],
    layouts[3],
    layouts[3],
    layouts[1],
    layouts[1],
    layouts[1],
    layouts[1],
    layouts[1],
    layouts[4]
  }
}

-- Error handling ──────────────────────────────────────────────────────────────

-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config).
if awesome.startup_errors then
  naughty.notify({
    preset = naughty.config.presets.critical,
    title  = "Oops, there were errors during startup!",
    text   = awesome.startup_errors
  })
end

-- Handle runtime errors after startup.
do
  local in_err = false
  awesome.connect_signal("debug::error", function (err)
    if in_err then return end -- Make sure don't go into an endless error loop.
    in_err = true

    naughty.notify({
      preset = naughty.config.presets.critical,
      title  = "Oops, an error happened!",
      text   = err
    })

    in_err = false
  end)
end

-- Theme ───────────────────────────────────────────────────────────────────────

beautiful.init(awful.util.getdir("config") ..
               "/themes/<%= local! :theme_name %>/theme.lua")

-- Wallpaper ───────────────────────────────────────────────────────────────────

if beautiful.wallpaper then
  for s = 1, screen.count() do
    gears.wallpaper.maximized(beautiful.wallpaper, s, true)
  end
end

-- Tags ────────────────────────────────────────────────────────────────────────

tags = {}
for s = 1, screen.count() do
  tags[s] = awful.tag(tags_info.names, s, tags_info.layout)
end

-- Quake ───────────────────────────────────────────────────────────────────────

local quakeconsole = {}
for s = 1, screen.count() do
  quakeconsole[s] = quake({ app = terminal_cmd })
end

-- Menu ────────────────────────────────────────────────────────────────────────

local awesome_menu = {
  { "manual",      terminal_cmd .. " -e man awesome" },
  { "edit config", editor_cmd .. " " .. awesome.conffile },
  { "restart",     awesome.restart },
  { "quit",        awesome.quit }
}

local menu_items = menugen.build_menu()
table.insert(menu_items, 0, { "awesome", awesome_menu, beautiful.awesome_icon })
table.insert(menu_items, 0, { "open terminal", terminal_cmd })

-- Main menu.
local main_menu = awful.menu.new({
  items = menu_items,
  theme = { height = 16, width = 130 }
})

-- Launcher widget to open the `main_menu`.
local main_menu_launcher = awful.widget.launcher({
  image = beautiful.awesome_icon,
  menu = main_menu
})

-- Menubar configuration.
menubar.utils.terminal = terminal_cmd -- Set terminal for apps that require it.

-- Wibox ───────────────────────────────────────────────────────────────────────

markup = lain.util.markup

-- Separators
separators = lain.util.separators
spr = wibox.widget.textbox(' ')
arrl_dl = separators.arrow_left(beautiful.bg_focus, "alpha")
arrl_ld = separators.arrow_left("alpha", beautiful.bg_focus)

<% if local!(:widgets).keys.include? "clock" %>
-- Textclock
mytextclock = lain.widgets.abase({
  timeout  = 60,
  cmd      = "date +'%a %d %b %R'",
  settings = function()
    widget:set_text(" " .. output)
  end
})
-- Calendar
lain.widgets.calendar:attach(mytextclock, { font_size = <%= local! :font_size_popup %> })
<% end %>

<% if local!(:widgets).keys.include? "memory" %>
memicon = wibox.widget.imagebox(beautiful.widget_mem)
memwidget = lain.widgets.mem({
  settings = function()
    widget:set_text(" " .. mem_now.used .. "MB ")
  end
})
<% end %>

<% if local!(:widgets).keys.include? "cpu" %>
cpuicon = wibox.widget.imagebox(beautiful.widget_cpu)
cpuwidget = lain.widgets.cpu({
  settings = function()
    widget:set_text(" " .. cpu_now.usage .. "% ")
  end
})
<% end %>

<% if local!(:widgets).keys.include? "temperature" %>
tempicon = wibox.widget.imagebox(beautiful.widget_temp)
tempwidget = lain.widgets.temp({
  settings = function()
    widget:set_text(" " .. coretemp_now .. "°C ")
  end
})
<% end %>

<% if local!(:widgets).keys.include? "disk" %>
fsicon = wibox.widget.imagebox(beautiful.widget_hdd)
fswidget = lain.widgets.fs({
    settings  = function()
        widget:set_text(" " .. fs_now.used .. "% ")
    end
  })
<% end %>

<% if local!(:widgets).keys.include? "battery" %>
baticon = wibox.widget.imagebox(beautiful.widget_battery)
batwidget = lain.widgets.bat({
  settings = function()
    if bat_now.status ~= "N/A" then
      if bat_now.ac_status == 1 then
        widget:set_markup(" AC ")
        baticon:set_image(beautiful.widget_ac)
        return
      elseif tonumber(bat_now.perc) <= 5 then
        baticon:set_image(beautiful.widget_battery_empty)
      elseif tonumber(bat_now.perc) <= 15 then
        baticon:set_image(beautiful.widget_battery_low)
      else
        baticon:set_image(beautiful.widget_battery)
      end
      widget:set_markup(" " .. bat_now.perc .. "% ")
    else
      baticon:set_image(beautiful.widget_ac)
    end
  end
})
<% end %>

<% if local!(:widgets).keys.include? "audio" %>
volicon = wibox.widget.imagebox(beautiful.widget_vol)
<% if has_feature? :pulseaudio %>
volumewidget = lain.widgets.pulseaudio({
  settings = function()
    if volume_now.muted == "yes" then
      volicon:set_image(beautiful.widget_vol_mute)
    elseif tonumber(volume_now.left)  == 0 and
           tonumber(volume_now.right) == 0 then
      volicon:set_image(beautiful.widget_vol_no)
    elseif tonumber(volume_now.left) + tonumber(volume_now.right) <= 50 then
      volicon:set_image(beautiful.widget_vol_low)
    else
      volicon:set_image(beautiful.widget_vol)
    end

    widget:set_text(volume_now.left .. "-" .. volume_now.right .. "%")
  end
})
<% else %> <%# Fallback to ALSA %>
volumewidget = lain.widgets.alsa({
  settings = function()
    if volume_now.status == "off" then
      volicon:set_image(beautiful.widget_vol_mute)
    elseif tonumber(volume_now.level) == 0 then
      volicon:set_image(beautiful.widget_vol_no)
    elseif tonumber(volume_now.level) <= 50 then
      volicon:set_image(beautiful.widget_vol_low)
    else
      volicon:set_image(beautiful.widget_vol)
    end

    widget:set_text(" " .. volume_now.level .. "% ")
  end
})
<% end %>
<% end %>

<% if local!(:widgets).keys.include? "network" %>
neticon = wibox.widget.imagebox(beautiful.widget_net)
neticon:buttons(awful.util.table.join(awful.button({ }, 1, function ()
  awful.util.spawn_with_shell(iptraf)
end)))
netwidget = lain.widgets.net({
  settings = function()
    widget:set_markup(markup("#7AC82E", " " .. net_now.received)
                      .. " " ..
                      markup("#46A8C3", " " .. net_now.sent .. " "))
  end
})
<% end %>

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
  awful.button({ }, 1, awful.tag.viewonly),
  awful.button({ modkey }, 1, awful.client.movetotag),
  awful.button({ }, 3, awful.tag.viewtoggle),
  awful.button({ modkey }, 3, awful.client.toggletag),
  awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
  awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
)
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
  awful.button({ }, 1, function (c)
    if c == client.focus then
      c.minimized = true
    else
      -- Without this, the following
      -- :isvisible() makes no sense
      c.minimized = false
      if not c:isvisible() then
        awful.tag.viewonly(c:tags()[1])
      end
      -- This will also un-minimize
      -- the client, if needed
      client.focus = c
      c:raise()
    end
  end),
  awful.button({ }, 3, function ()
    if instance then
      instance:hide()
      instance = nil
    else
      instance = awful.menu.clients({ width=250 })
    end
  end),
  awful.button({ }, 4, function ()
    awful.client.focus.byidx(1)
    if client.focus then client.focus:raise() end
  end),
  awful.button({ }, 5, function ()
    awful.client.focus.byidx(-1)
    if client.focus then client.focus:raise() end
  end))

for s = 1, screen.count() do

  -- Create a promptbox for each screen
  mypromptbox[s] = awful.widget.prompt()

  -- We need one layoutbox per screen.
  mylayoutbox[s] = awful.widget.layoutbox(s)
  mylayoutbox[s]:buttons(awful.util.table.join(
    awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
    awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
    awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
    awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)
  ))

  -- Create a taglist widget
  mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)

  -- Create a tasklist widget
  mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)

  -- Create the wibox
  mywibox[s] = awful.wibox({ position = "top", screen = s, height = 18 })

  -- Widgets that are aligned to the upper left
  local left_layout = wibox.layout.fixed.horizontal()
  left_layout:add(spr)
  left_layout:add(mytaglist[s])
  left_layout:add(mypromptbox[s])
  left_layout:add(spr)

  -- Widgets that are aligned to the upper right
  local right_layout_toggle = true
  local function right_layout_add (...)
    local arg = {...}
    if right_layout_toggle then
      right_layout:add(arrl_ld)
      for i, n in pairs(arg) do
        right_layout:add(wibox.widget.background(n ,beautiful.bg_focus))
      end
    else
      right_layout:add(arrl_dl)
      for i, n in pairs(arg) do
        right_layout:add(n)
      end
    end
    right_layout_toggle = not right_layout_toggle
  end

  right_layout = wibox.layout.fixed.horizontal()
  if s == 1 then right_layout:add(wibox.widget.systray()) end
  right_layout:add(spr)
  <% if local!(:widgets).keys.include? "audio" %>
  right_layout_add(volicon, volumewidget)
  <% end %>
  <% if local!(:widgets).keys.include? "memory" %>
  right_layout_add(memicon, memwidget)
  <% end %>
  <% if local!(:widgets).keys.include? "cpu" %>
  right_layout_add(cpuicon, cpuwidget)
  <% end %>
  <% if local!(:widgets).keys.include? "temperature" %>
  right_layout_add(tempicon, tempwidget)
  <% end %>
  <% if local!(:widgets).keys.include? "disk" %>
  right_layout_add(fsicon, fswidget)
  <% end %>
  <% if local!(:widgets).keys.include? "battery" %>
  right_layout_add(baticon, batwidget)
  <% end %>
  <% if local!(:widgets).keys.include? "network" %>
  right_layout_add(neticon,netwidget)
  <% end %>
  <% if local!(:widgets).keys.include? "clock" %>
  right_layout_add(mytextclock, spr)
  <% end %>
  right_layout_add(mylayoutbox[s])

  -- Now bring it all together (with the tasklist in the middle)
  local layout = wibox.layout.align.horizontal()
  layout:set_left(left_layout)
  layout:set_middle(mytasklist[s])
  layout:set_right(right_layout)
  mywibox[s]:set_widget(layout)

end

-- Mouse bindings ──────────────────────────────────────────────────────────────

root.buttons(awful.util.table.join(
  awful.button({ }, 3, function () main_menu:toggle() end),
  awful.button({ }, 4, awful.tag.viewnext),
  awful.button({ }, 5, awful.tag.viewprev)
))

-- Key bindings ────────────────────────────────────────────────────────────────

globalkeys = awful.util.table.join(
  -- Tags navigation.
  awful.key({ modkey,        }, "Escape", awful.tag.history.restore),
  awful.key({ modkey,        }, "u",      awful.client.urgent.jumpto),
  awful.key({ modkey,        }, "Left",   awful.tag.viewprev),
  awful.key({ modkey,        }, "Right",  awful.tag.viewnext),
  awful.key({ modkey, altkey }, "Left",   function ()
                                            lain.util.tag_view_nonempty(-1)
                                          end),
  awful.key({ modkey, altkey }, "Right",  function ()
                                            lain.util.tag_view_nonempty(1)
                                          end),
  awful.key({ modkey,        }, "k",      function ()
                                            awful.client.focus.byidx(-1)
                                            if client.focus then
                                              client.focus:raise()
                                            end
                                          end),
  awful.key({ modkey,        }, "j",      function ()
                                            awful.client.focus.byidx(1)
                                            if client.focus then
                                              client.focus:raise()
                                            end
                                          end),

  -- Layout management.
  awful.key({ modkey,           }, "l",     function ()
                                              awful.tag.incmwfact(0.05)
                                            end),
  awful.key({ modkey,           }, "h",     function ()
                                              awful.tag.incmwfact(-0.05)
                                            end),
  awful.key({ modkey, "Shift"   }, "l",     function ()
                                              awful.tag.incnmaster(-1)
                                            end),
  awful.key({ modkey, "Shift"   }, "h",     function ()
                                              awful.tag.incnmaster(1)
                                            end),
  awful.key({ modkey, "Control" }, "l",     function ()
                                              awful.tag.incncol(-1)
                                            end),
  awful.key({ modkey, "Control" }, "h",     function ()
                                              awful.tag.incncol(1)
                                            end),
  awful.key({ modkey, "Shift"   }, "space", function ()
                                              awful.layout.inc(layouts, -1)
                                            end),
  awful.key({ modkey,           }, "space", function ()
                                              awful.layout.inc(layouts, 1)
                                            end),
  awful.key({ modkey, "Control" }, "n",     awful.client.restore),

  -- Windows navigation / management.
  awful.key({ modkey, "Shift"   }, "k",   function ()
                                            awful.client.swap.byidx(-1)
                                          end),
  awful.key({ modkey, "Shift"   }, "j",   function ()
                                            awful.client.swap.byidx(1)
                                          end),
  awful.key({ modkey, "Control" }, "k",   function ()
                                            awful.screen.focus_relative(-1)
                                          end),
  awful.key({ modkey, "Control" }, "j",   function ()
                                            awful.screen.focus_relative(1)
                                          end),
  awful.key({ modkey,           }, "Tab", function ()
                                            awful.client.focus.history.previous()
                                            if client.focus then
                                              client.focus:raise()
                                            end
                                          end),

  -- AwesomeWM management.
  awful.key({ modkey, "Control" }, "r", awesome.restart),
  awful.key({ modkey, "Shift"   }, "q", awesome.quit),

  -- Main Menu.
  awful.key({ modkey, }, "w", function () main_menu:show() end),

  -- Prompt.
  awful.key({ modkey }, "r", function () mypromptbox[mouse.screen]:run() end),
  awful.key({ modkey }, "p", function () menubar.show() end),

  -- Run predefined programs.
  awful.key({ modkey, }, "`",      function ()
                                     quakeconsole[mouse.screen]:toggle()
                                   end),
  awful.key({ modkey, }, "Return", function ()
                                     awful.util.spawn(terminal_cmd)
                                   end),

  -- Manage audio settings.
  <% if has_feature? :pulseaudio %>
  --[[
  awful.key({ }, "XF86AudioRaiseVolume", function ()
                                           os.execute(string.format(
                                             "pactl set-sink-volume %d +4%%",
                                             volumewidget.sink
                                           ))
                                           volumewidget.update()
                                         end),
  awful.key({ }, "XF86AudioLowerVolume", function ()
                                           os.execute(string.format(
                                             "pactl set-sink-volume %d -4%%",
                                             volumewidget.sink
                                           ))
                                           volumewidget.update()
                                         end),
  awful.key({ }, "XF86AudioMute",        function ()
                                           if volumewidget.muted == "yes" then
                                             os.execute(string.format(
                                               "pactl set-sink-mute %d no",
                                               volumewidget.sink
                                             ))
                                           else
                                             os.execute(string.format(
                                               "pactl set-sink-mute %d yes",
                                               volumewidget.sink
                                             ))
                                           end
                                           volumewidget.update()
                                         end),
  ]]--
  <% else %> <%# Default to Alsa %>
  --[[
  awful.key({ }, "XF86AudioRaiseVolume", function ()
                                           os.execute(string.format(
                                             "amixer set %s 4%%+",
                                             volumewidget.channel
                                           ))
                                           volumewidget.update()
                                         end),
  awful.key({ }, "XF86AudioLowerVolume", function ()
                                           os.execute(string.format(
                                             "amixer set %s 4%%-",
                                             volumewidget.channel
                                           ))
                                           volumewidget.update()
                                         end),
  awful.key({ }, "XF86AudioMute",        function ()
                                           os.execute(string.format(
                                             "amixer set %s toggle",
                                             volumewidget.channel
                                           ))
                                           volumewidget.update()
                                         end),
  --]]
  <% end %>

  -- Run LUA code.
  awful.key({ modkey }, "x", function ()
                               awful.prompt.run(
                                 { prompt = "Run Lua code: " },
                                 mypromptbox[mouse.screen].widget,
                                 awful.util.eval,
                                 nil,
                                 awful.util.getdir("cache") .. "/history_eval"
                               )
                             end)
)

clientkeys = awful.util.table.join(
  -- Current window management.
  awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen end),
  awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle),
  awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
  awful.key({ modkey,           }, "o",      awful.client.movetoscreen),
  awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop end),
  awful.key({ modkey,           }, "n",      function (c) c.minimized = true end),
  awful.key({ modkey,           }, "m",      function (c)
    c.maximized_horizontal = not c.maximized_horizontal
    c.maximized_vertical   = not c.maximized_vertical
  end),

  -- Current window operations.
  awful.key({ modkey, "Shift"   }, "c", function (c) c:kill() end)
)

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, 9 do
  globalkeys = awful.util.table.join(globalkeys,
    -- View tag only.
    awful.key({ modkey }, "#" .. i + 9, function ()
      local screen = mouse.screen
      local tag = awful.tag.gettags(screen)[i]
      if tag then awful.tag.viewonly(tag) end
    end),
    -- Toggle tag.
    awful.key({ modkey, "Control" }, "#" .. i + 9, function ()
      local screen = mouse.screen
      local tag = awful.tag.gettags(screen)[i]
      if tag then awful.tag.viewtoggle(tag) end
    end),
    -- Move client to tag.
      awful.key({ modkey, "Shift" }, "#" .. i + 9, function ()
      if client.focus then
        local tag = awful.tag.gettags(client.focus.screen)[i]
        if tag then awful.client.movetotag(tag) end
      end
    end),
    -- Toggle tag.
    awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9, function ()
      if client.focus then
        local tag = awful.tag.gettags(client.focus.screen)[i]
        if tag then awful.client.toggletag(tag) end
      end
    end)
  )
end

clientbuttons = awful.util.table.join(
  awful.button({        }, 1, function (c) client.focus = c; c:raise() end),
  awful.button({ modkey }, 1, awful.mouse.client.move),
  awful.button({ modkey }, 3, awful.mouse.client.resize)
)

-- Set global keys.
root.keys(globalkeys)

-- Rules ───────────────────────────────────────────────────────────────────────

-- Rules to apply to new clients (through the `manage` signal).
awful.rules.rules = {
  -- All clients will match this rule.
  { rule = { },
    properties = {
      border_width = beautiful.border_width,
      border_color = beautiful.border_normal,
      focus = awful.client.focus.filter,
      raise = true,
      keys = clientkeys,
      buttons = clientbuttons
    }
  }
}

-- Signals ─────────────────────────────────────────────────────────────────────

-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c, startup)
  -- Enable sloppy focus.
  c:connect_signal("mouse::enter", function(c)
    if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
       and awful.client.focus.filter(c) then
      client.focus = c
    end
  end)

  if not startup then
    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it master.
    -- awful.client.setslave(c)

    -- Put windows in a smart way, only if they doesn't set an initial position.
    if not c.size_hints.user_position and not c.size_hints.program_position then
      awful.placement.no_overlap(c)
      awful.placement.no_offscreen(c)
    end
  end

  local titlebars_enabled = false
  if titlebars_enabled and (c.type == "normal" or c.type == "dialog") then
    -- buttons for the titlebar
    local buttons = awful.util.table.join(
      awful.button({ }, 1, function()
        client.focus = c
        c:raise()
        awful.mouse.client.move(c)
      end),
      awful.button({ }, 3, function()
        client.focus = c
        c:raise()
        awful.mouse.client.resize(c)
      end)
    )

    -- Widgets that are aligned to the left
    local left_layout = wibox.layout.fixed.horizontal()
    left_layout:add(awful.titlebar.widget.iconwidget(c))
    left_layout:buttons(buttons)

    -- Widgets that are aligned to the right
    local right_layout = wibox.layout.fixed.horizontal()
    right_layout:add(awful.titlebar.widget.floatingbutton(c))
    right_layout:add(awful.titlebar.widget.maximizedbutton(c))
    right_layout:add(awful.titlebar.widget.stickybutton(c))
    right_layout:add(awful.titlebar.widget.ontopbutton(c))
    right_layout:add(awful.titlebar.widget.closebutton(c))

    -- The title goes in the middle
    local middle_layout = wibox.layout.flex.horizontal()
    local title = awful.titlebar.widget.titlewidget(c)
    title:set_align("center")
    middle_layout:add(title)
    middle_layout:buttons(buttons)

    -- Now bring it all together
    local layout = wibox.layout.align.horizontal()
    layout:set_left(left_layout)
    layout:set_right(right_layout)
    layout:set_middle(middle_layout)

    awful.titlebar(c):set_widget(layout)
  end
end)

-- No border for maximized or single clients
client.connect_signal("focus", function(c)
  if c.maximized_horizontal == true and c.maximized_vertical == true then
    c.border_width = 0
  elseif #awful.client.visible(mouse.screen) > 1 then
    c.border_width = beautiful.border_width
    c.border_color = beautiful.border_focus
  end
end)

client.connect_signal("unfocus", function(c)
  c.border_color = beautiful.border_normal
end)

-- Autostart applications ──────────────────────────────────────────────────────

<% if local? :with_urxvtd %>
run.once("urxvtd")
<% end -%>

<% if has_feature? :unclutter %>
run.once("unclutter -root")
<% end -%>

-- ─────────────────────────────────────────────────────────────────────────────
-- vim: set filetype=eruby.lua :
